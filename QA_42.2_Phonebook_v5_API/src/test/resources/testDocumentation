
# **Тестовая документация**

## 1. **Введение**

Этот документ описывает план тестирования для проекта, включающего тестирование аутентификации,
обработки данных контактов и работы с токенами через API. Тесты реализованы с использованием Java и
библиотеки RestAssured для выполнения HTTP-запросов и проверки их корректности.

## 2. **Цели тестирования**

Основные цели тестирования:
- Проверить корректность аутентификации пользователей через API.
- Убедиться, что система корректно обрабатывает данные контактов (создание, чтение, обновление, удаление).
- Проверить работу с токенами аутентификации и их правильное использование.
- Убедиться, что система корректно обрабатывает ошибки при неправильных запросах.

## 3. **Окружение для тестирования**

Тестирование выполняется с использованием следующих компонентов:
- **Язык программирования**: Java
- **Система сборки**: Gradle
- **Библиотеки**: RestAssured для тестирования API, JUnit для выполнения тестов

## 4. **Области тестирования**

### 4.1 Аутентификация
- Проверка успешного входа пользователя с правильными учетными данными.
- Обработка некорректных учетных данных (неправильное имя пользователя или пароль).
- Проверка работы с токенами (генерация, передача, истечение срока действия).

### 4.2 Работа с контактами
- Создание нового контакта.
- Получение данных о существующем контакте.
- Обновление данных контакта.
- Удаление контакта.
- Обработка ошибок при неправильных данных (некорректный формат, пустые поля).

### 4.3 Общие тесты
- Проверка корректности ответа сервера (статус-коды, тело ответа).
- Обработка серверных ошибок (например, 500 Internal Server Error).

## 5. **Классы и тесты**

### 5.1 Классы DTO

- **AuthenticationBodyDto.java**: отвечает за передачу данных аутентификации. Содержит поля для
имени пользователя и пароля, а также соответствующие методы доступа (геттеры и сеттеры).

- **ContactDto.java**: используется для передачи информации о контакте. Содержит поля для имени,
адреса электронной почты, телефона и методы доступа к этим полям.

- **ContactsDto.java**: представляет собой коллекцию контактов. Содержит методы для добавления,
удаления и получения списка контактов.

- **ErrorMessageDto.java**: передает информацию об ошибках, содержит сообщение об ошибке и код ошибки.

- **ResponseMessageDto.java**: представляет стандартный ответ от сервера с сообщением и возможными данными ответа.

- **TokenDto.java**: управляет токенами аутентификации, включает методы для их получения и установки.

### 5.2 Классы утилит

- **HttpUtils.java**: утилитарный класс для работы с HTTP запросами. Содержит методы для отправки и
получения HTTP-запросов и обработки ответов.

- **TestProperties.java**: отвечает за загрузку и работу с конфигурационными параметрами для тестов.
Содержит методы для получения значений свойств.

- **Utils.java**: общий утилитарный класс для обработки строк и других вспомогательных функций.

### 5.3 Тесты

#### 5.3.1 **LoginTestHttp.java**

Тестирование аутентификации:
- **Тест успешного логина**: проверка, что пользователь может успешно пройти аутентификацию.
- **Тест логина с некорректными данными**: проверка, как система обрабатывает неверные учетные данные.

#### 5.3.2 **RestAssuredTests.java**

Тестирование API с использованием RestAssured:
- **GET запросы**: проверка успешного выполнения GET запросов к API.
- **POST запросы**: проверка успешного выполнения POST запросов и валидация данных.

#### 5.3.3 **BaseTest.java**

Общий класс для настройки тестовой среды:
- **Setup**: инициализация и настройка перед запуском тестов.
- **Teardown**: завершение и очистка после выполнения тестов.

#### 5.3.4 **ContactsTests.java**

Тестирование операций с контактами:
- **Создание контакта**: проверка успешного создания нового контакта.
- **Чтение контактов**: проверка успешного получения списка контактов.
- **Обновление контакта**: тестирование обновления существующего контакта.
- **Удаление контакта**: проверка успешного удаления контакта.

#### 5.3.5 **LoginTests.java**

Тестирование логина:
- **Тест успешного входа**: проверка, что пользователь может войти в систему с правильными данными.
- **Тест неудачного входа**: проверка обработки ошибок при неправильных учетных данных.

## 6. **План тестирования**

| ID теста |      Название      |          Описание                  |     Ожидаемый результат     | Статус |
| -------- | -------------------| ---------------------------------- | --------------------------- | ------ |
| T001     | Успешный логин     | Тест успешного входа пользователя  | 200 OK, токен возвращён     | Pass   |
| T002     | Неудачный логин    | Тест логина с неверными данными    | 401 Unauthorized            | Pass   |
| T003     | Создание контакта  | Проверка создания нового контакта  | 201 Created, контакт создан | Pass   |
| T004     | Получение контактов| Проверка получения списка контактов| 200 OK, список возвращён    | Pass   |
| T005     | Обновление контакта| Тестирование обновления контакта   | 200 OK, контакт обновлён    | Pass   |
| T006     | Удаление контакта  | Проверка удаления контакта         | 204 No Content              | Pass   |

## 7. **Ожидаемые результаты**

- Все тесты должны проходить успешно при правильных данных.
- При некорректных данных система должна возвращать соответствующие ошибки с правильными статусами HTTP.

## 8. **Заключение**

Этот документ описывает тесты для проверки корректности работы аутентификации, операций с контактами и общих API взаимодействий. Все тесты должны быть выполнены в тестовой среде с использованием библиотеки RestAssured и системы сборки Gradle.

---

Это базовый шаблон, который можно расширять в зависимости от развития проекта и добавления новых функций для тестирования.